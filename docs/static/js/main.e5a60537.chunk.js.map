{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEVC,mBAAS,IAFC,mBAExCC,EAFwC,KAE5BC,EAF4B,KAsBhD,OAEI,0BAAMC,SAfW,SAACC,GAClBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAe,SAAAS,GAAI,OAAOP,GAAP,mBAAsBO,OACzCN,EAAc,OASb,2BACDO,KAAK,OACLC,MAAOT,EACPU,SAxBkB,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,Y,uBCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACqCC,UAAWH,GADhD,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAEXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIrC,OAFAc,QAAQC,IAAKN,EAAIC,EAAOV,GAGpB,yBAAKgB,UAAU,4CAEX,yBAAKC,IAAMjB,EAAMkB,IAAMR,IACvB,2BAAKA,KCPJS,EAAU,SAAC,GAAoB,IAAjBrB,EAAgB,EAAhBA,SAAgB,ECDf,SAAEA,GAAe,IAAD,EAEZd,mBAAS,CACjCqB,KAAM,GACNe,SAAS,IAJ2B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAoBxC,OAZAC,qBAAW,WAEP1B,EAASC,GACJ0B,MAAM,SAAAC,GACHH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAGtB,IAGIC,EDjB0BK,CAAc5B,GAAlCa,EAF0B,EAE/BN,KAAae,EAFkB,EAElBA,QAErB,OACI,oCACA,wBAAIJ,UAAU,qCAAd,IAAqDlB,EAArD,KAGEsB,GAAW,uBAAIJ,UAAU,oCAAd,cAEb,yBAAKA,UAAU,aAEHL,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACAmB,IAAQnB,EAAIC,IACPD,UEdhBoB,EAAe,WAAO,IAAD,EAGQ5C,mBAAS,CAAC,cAHlB,mBAGtB6C,EAHsB,KAGV9C,EAHU,KAS9B,OACK,oCACG,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC9B,6BAGA,4BASS8C,EAAWtB,KAAK,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACAA,SAAaA,EACb6B,IAAQ7B,UC5BjCgC,IAASC,OAEL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.e5a60537.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [ inputValue, setinputValue ] = useState('');//si no agregamos las comillas el valor de inicio va a ser undefined.\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setinputValue(e.target.value); //valor del string dentro del evento.\r\n    }     \r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        \r\n        if(inputValue.trim().length > 2){\r\n            \r\n            setCategories( cate => [  inputValue, ...cate ] );\r\n            setinputValue('');\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return(\r\n            \r\n        <form onSubmit={ handleSubmit } >\r\n             <input\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={ handleInputChange }\r\n            />\r\n        </form>       \r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${  encodeURI( category ) }&limit=10&api_key=SvrrEmPVuUSCq93Ahk3w7Gbq3V0i0GQf`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    //mutacion del array devuelto por el servicio con solo lo necesario:\r\n    const gifs = data.map( img  => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            // url: img.images?.downsized_medium.url //se puede agregar el signo ? para agregar un condicional para evitar el undefined.\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n\r\n    return gifs;\r\n\r\n    \r\n}    ","import React from 'react'\r\n\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\r\n    console.log( id, title, url );\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInUp\">\r\n            {/* { img.title } */}\r\n            <img src={ url } alt={ title }/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport {GifGridItem} from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n  \r\n    const { data:images, loading } = useFetchGifs( category ); // custom hook que cambia el estado de la data y el loading \r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n\r\n\r\n        { loading && <p  className=\"animate__animated animate__flash\">loading...</p>  }\r\n\r\n        <div className=\"card-grid\">             \r\n                {  \r\n                    images.map( img => (                        \r\n                        <GifGridItem \r\n                        key = { img.id }                       \r\n                        { ...img }\r\n                        />\r\n                    ))  \r\n                }  \r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [ state, setState ] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n    useEffect( ()=> {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {                     \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                }) \r\n            })\r\n    }, [])\r\n\r\n\r\n    return state; //{ data:[], loding:true }\r\n\r\n}","import React, { useState } from 'react';\r\nimport  { AddCategory }  from './components/AddCategory';\r\nimport  { GifGrid }  from './components/GifGrid';\r\n\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n  \r\n\r\n    const [ categories, setCategories ] = useState(['One Punch']); \r\n\r\n    // const handleAdd = () => {             \r\n    //     setCategories( cate => [ ...cate, 'HunterXHunter' ] ) // ...cate con el operador de los tres puntos tomamos el valor anterior del array.\r\n    // }\r\n\r\n    return(\r\n         <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />           \r\n           <hr />\r\n\r\n           {/* <button onClick={ handleAdd }>Agregar</button> */}\r\n           <ol>\r\n\r\n                {/* {\r\n                    categories.map( (category, i)=> {\r\n                        //el key no debe ser el indice del map, y debe ser unico.\r\n                        return <li key={ i }>{ category }</li>\r\n                    })\r\n                } */}\r\n                 {\r\n                    categories.map( category => (                       \r\n                         <GifGrid  \r\n                         category = { category }\r\n                         key = { category }                         \r\n                         />\r\n                    ))                  \r\n                }\r\n\r\n           </ol>\r\n          \r\n         </>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {GifExpertApp} from './GifExpertApp';\n\nReactDOM.render(\n  \n    <GifExpertApp />,  \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}